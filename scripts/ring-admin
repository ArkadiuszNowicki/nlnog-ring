#!/usr/bin/env python
import sqlite3, sys, inspect, re, time

DB='./ring.sqlite'
ZONE='ring.nlnog.net'
PDNS=['ns01.ring.nlnog.net']

SCHEMA='''
CREATE TABLE participants
(
    id INTEGER PRIMARY KEY,
    company TEXT UNIQUE NOT NULL,
    url TEXT,
    contact TEXT NOT NULL,
    email TEXT NOT NULL,
    nocemail TEXT NOT NULL,
    companydesc TEXT,
    username TEXT UNIQUE,
    userid INTEGER,
    active INTEGER
);
CREATE TABLE machines
(
    id INTEGER PRIMARY KEY,
    hostname TEXT UNIQUE NOT NULL,
    v4 TEXT UNIQUE,
    v6 TEXT UNIQUE,
    autnum INTEGER NOT NULL,
    country TEXT,
    state TEXT,
    dc TEXT,
    geo TEXT,
    participant INTEGER NOT NULL,
    FOREIGN KEY(participant) REFERENCES participants(id)
);
CREATE TABLE sshkeys
(
    id INTEGER PRIMARY KEY,
    keytype TEXT NOT NULL,
    sshkey TEXT NOT NULL,
    keyid TEXT,
    participant INTEGER,
    FOREIGN KEY(participant) REFERENCES participants(id)
);
CREATE TABLE premarks
(
    id INTEGER PRIMARY KEY,
    remark TEXT,
    tstamp INTEGER,
    participant INTEGER,
    FOREIGN KEY(participant) REFERENCES participants(id)
);
CREATE TABLE mremarks
(
    id INTEGER PRIMARY KEY,
    remark TEXT,
    tstamp INTEGER,
    machine INTEGER,
    FOREIGN KEY(machine) REFERENCES machines(id)
);
'''

class commands(object):
    def __init__(self):
        super(commands, self).__init__()

    def run(self, argv):
        func = None
        for i in reversed(range(len(argv))):
            try:
                func = getattr(self, 'cmd_'+'_'.join(argv[0:i+1]))

                args, kwargs = self.splitargv(argv[i+1:])
                break
            except AttributeError:
                pass

        if not func:
            return self.usage()

        spec = inspect.getargspec(func)
        reqcount = len(spec.args)-1
        if spec.defaults:
            reqcount = reqcount - len(spec.defaults)
        if reqcount and not len(args) and not len(kwargs):
            kwargs=self.ask(func)
        return func(*args, **kwargs)
    
    def ask(self, func):
        spec = inspect.getargspec(func)
        d=dict()
        for i,k in enumerate(spec.args[1:]):
            print "%s:" % k,
            if i >= (len(spec.args)-len(spec.defaults)-1):
                print "(optional)",
            v=raw_input()
            d[k]=v
        return d

    def splitargv(self, argv):
        args = list()
        kwargs = dict()
        for arg in argv:
            if '=' in arg:
                k,v = arg.split('=',1)
                kwargs[k]=v
            else:
                if kwargs:
                    raise SyntaxError
                args.append(arg)
        
        return args, kwargs

    def usage(self):
        cmds = []
        for k, v in sorted(inspect.getmembers(self)):
            if k.startswith('cmd_'):
                cmd = k[4:].replace('_',' ')
                argspec = inspect.getargspec(v)
                args = []
                if argspec.defaults:
                    defcount = len(argspec.defaults)
                    for arg in argspec.args[1:-defcount]:
                        args.append('<%s>' % arg)
                    for arg in argspec.args[-defcount:]:
                        args.append('[%s]' % arg)
                else:
                    for arg in argspec.args[1:]:
                        args.append('<%s>' % arg)
                doc=v.__doc__
                if not doc:
                    doc=''
                cmds.append(('%s %s' % (cmd, ' '.join(args)), doc))

        maxcmdlen = max(len(cmd[0]) for cmd in cmds)
        for cmd, doc in cmds:
            print '%-*s %s' % (maxcmdlen+2, cmd, doc)
        return 1
    
    def dbdo(self, q, v, script=False):
        conn = sqlite3.connect(DB)
        cur = conn.cursor()
        if script:
            cur.executescript(q)
        else:
            cur.execute(q, v)
        conn.commit()
        return cur.rowcount, cur.lastrowid
    
    def dbquery(self, q, v=None):
        conn = sqlite3.connect(DB)
        conn.row_factory = sqlite3.Row
        cur = conn.cursor()
        if v:
            cur.execute(q, v)
        else:
            cur.execute(q)
        for row in cur:
            yield row

    def dbselect(self, table, **kwargs):
        cols, vals = zip(*kwargs.items())
        query = 'SELECT * FROM %s WHERE %s' % (table, ' '.join('%s=?' % col for col in cols))
        return self.dbquery(query, vals)

    def dbselectone(self, table, **kwargs):
        res = list(self.dbselect(table, **kwargs))
        if len(res)>1:
            raise KeyError
        elif res:
            return res[0]
        else:
            return None
        
    def dbinsert(self, table, **kwargs):
        cols, vals = zip(*kwargs.items())
        query = 'INSERT INTO %s (%s) VALUES(%s)' % (table, ','.join(cols), ','.join(['?']*len(vals)))
        _, rowid = self.dbdo(query, vals)
        return rowid
    
    def dbdelete(self, table, **kwargs):
        cols, vals = zip(*kwargs.items())
        query = 'DELETE FROM %s WHERE %s' % (table, ' '.join('%s=?' % col for col in cols))
        self.dbdo(query, vals)
    
    def dbupdate(self, table, id, **kwargs):
        cols, vals = zip(*kwargs.items())
        query = 'UPDATE %s SET %s WHERE id=%s' % (table, ' '.join('%s=?' % col for col in cols), id)
        self.dbdo(query, vals)

    def dblist(self, table):
        query = 'SELECT * FROM %s' % table
        result = self.dbquery(query)
        for row in result:
            print row

    def cmd_add_participant(self,
            company, contact, email, nocemail, username,
            companydesc=None, url=None):
        """add a participant"""
        partid=self.dbinsert('participants',
            company=company,
            url=url,
            contact=contact,
            email=email,
            nocemail=nocemail,
            companydesc=companydesc,
            username=username)
        print 'participant %s added' % (partid)
    
    def cmd_update_participant(self,username,attribute,value):
        """update participant data"""
        participant=self.dbselectone('participants', username=username)
        partid=participant['id'];
        self.dbupdate('participants',partid,**{attribute:value});
        print 'attribute %s for participant %s updated' % (attribute,username)
    
    def cmd_delete_participant(self,username):
        """delete a participant"""
        participant=self.dbselectone('participants', username=username)
        partid=participant['id'];
        result=self.dbselect('machines', participant=partid)
        for row in result:
            sys.exit('participant %s still has machines' % username);

        self.dbdelete('sshkeys',participant=partid);
        print 'sshkeys for participant %s deleted' % (username)
        self.dbdelete('premarks',participant=partid);
        print 'remarks for participant %s deleted' % (username)
        self.dbdelete('participants',username=username);
        print 'participant %s deleted' % (username)
    
    def cmd_list_participants(self, username=None):
        """list participants"""
        if username:
            print self.dbselectone('participants', username=username)
        else:
            self.dblist('participants')

    def cmd_add_machine(self,
            username, hostname, autnum, country, geo, dc=None,
            v4=None, v6=None, state=None):
        """add a machine"""
        participant=self.dbselectone('participants', username=username)
        partid=participant['id'];
        machineid = self.dbinsert('machines',
            participant=partid,
            hostname=hostname,
            autnum=autnum,
            country=country,
            geo=geo,
            dc=dc,
            v4=v4,
            v6=v6,
            state=state)
        print "Added machine %s ('%s' at '%s') for participant '%s'" % (machineid, hostname, country, participant['company'])
    
    def cmd_delete_machine(self,hostname):
        """delete a machine"""
        if not (re.match(r'.*%s$' % ZONE,hostname)):
            hostname=hostname + "." + ZONE
        machine=self.dbselectone('machines', hostname=hostname)
        machid=machine['id'];
        self.dbdelete('mremarks',machine=machid);
        print 'remarks for machine %s deleted' % (hostname)
        self.dbdelete('machines',hostname=hostname);
        print 'machine %s deleted' % (hostname)
    
    def cmd_update_machine(self,hostname,attribute,value):
        """update machine data"""
        if not (re.match(r'.*%s$' % ZONE,hostname)):
            hostname=hostname + "." + ZONE
        machine=self.dbselectone('machines', hostname=hostname)
        machid=machine['id'];
        self.dbupdate('machines',machid,**{attribute:value});
        print 'attribute %s for machine %s updated' % (attribute,hostname)

    def cmd_list_machines(self,username=None):
        """list machines"""
        if username:
            participant=self.dbselectone('participants', username=username)
            partid=participant['id'];
            result=self.dbselect('machines', participant=partid)
            for row in result:
                print row
        else:
            self.dblist('machines')
    
    def cmd_add_sshkey(self,username,keytype,sshkey,keyid):
        """add an sshkey"""
        participant=self.dbselectone('participants', username=username)
        partid=participant['id'];
        kid = self.dbinsert('sshkeys',
            participant=partid,
            keytype=keytype,
            sshkey=sshkey,
            keyid=keyid)
        print "Added key %s for participant '%s'" % (kid, participant['company'])
    
    def cmd_delete_sshkey(self,id):
        """delete an sshkey"""
        self.dbdelete('sshkeys',id=id);
        print 'key deleted'
    
    def cmd_list_sshkeys(self,username):
        """list sshkeys"""
        participant=self.dbselectone('participants', username=username)
        partid=participant['id'];
        result=self.dbselect('sshkeys', participant=partid)
        for row in result:
            print row
    
    def cmd_add_premark(self,username,remark):
        """add a participant remark"""
        participant=self.dbselectone('participants', username=username)
        partid=participant['id'];
        tstamp=time.time()
        rid = self.dbinsert('premarks',
            participant=partid,
            remark=remark,
            tstamp=tstamp)
        print "Added remark %s for participant '%s'" % (rid, participant['company'])
    
    def cmd_delete_premark(self,id):
        """delete a participant remark"""
        self.dbdelete('premarks',id=id);
        print 'remark %s deleted' % (id)
    
    def cmd_list_premarks(self,username):
        """list participant remarks"""
        participant=self.dbselectone('participants', username=username)
        partid=participant['id'];
        result=self.dbselect('premarks', participant=partid)
        for row in result:
            print row
    
    def cmd_add_mremark(self,hostname,remark):
        """add a machine remark"""
        if not (re.match(r'.*%s$' % ZONE,hostname)):
            hostname=hostname + "." + ZONE
        machine=self.dbselectone('machines', hostname=hostname)
        machid=machine['id'];
        tstamp=time.time()
        rid = self.dbinsert('mremarks',
            machine=machid,
            remark=remark,
            tstamp=tstamp)
        print "Added remark %s for machine %s" % (rid, hostname)
    
    def cmd_delete_mremark(self,id):
        """delete a machine remark"""
        self.dbdelete('mremarks',id=id);
        print 'remark %s deleted' % (id)
    
    def cmd_list_mremarks(self,hostname):
        """list machine remarks"""
        if not (re.match(r'.*%s$' % ZONE,hostname)):
            hostname=hostname + "." + ZONE
        machine=self.dbselectone('machines', hostname=hostname)
        machid=machine['id'];
        result=self.dbselect('mremarks', machine=machid)
        for row in result:
            print row

    def cmd_initdb(self):
        """initialize database"""
        self.dbdo(SCHEMA, None, script=True)

    def cmd_generate_puppet_user(self,username):
        """generate puppet user config"""
        p=self.dbselectone('participants', username=username)
        
        print "##### BEGIN "+p['username']+" #####"
        print ""
        print "    @add_user { '"+p['username']+"':"
        print "        email => '"+p['nocemail']+"',"
        print "        company => '"+p['company']+"',"
        print "        uid => '"+str(p['userid'])+"',"
        print "        groups => ['ring-users'],"
        print "    }"
        print "    @authorized_keys { '"+p['username']+"':"
        print "        sshkeys => ["
        
        keys=self.dbselect('sshkeys', participant=p['id'])
        for k in keys:
            print "                '"+k['keytype']+" "+k['sshkey']+" "+k['keyid']+"',"

        print "            ],"
        print "    }"
        print ""
        print "##### END "+p['username']+" #####"
    
    def cmd_generate_puppet_node(self,hostname):
        """generate puppet node config"""
        if not (re.match(r'.*%s$' % ZONE,hostname)):
            hostname=hostname + "." + ZONE
        name=re.sub('.' + ZONE,'',hostname)
        m=self.dbselectone('machines', hostname=hostname)
        p=self.dbselectone('participants', id=m['participant'])

        print "node '"+name+"' inherits ringnode {"
        print "    $owner = \""+p['username']+"\""
        print "    $location = \""+m['geo']+"\""
        print "    include amp_client"
        print "    include nagios::target::fqdn"
        print "    include nagios_services"
        print "    include set_local_settings"
        print "    include users"
        print "}"
    
    def cmd_generate_hostsfile(self,hostname):
        """generate hostsfile config"""
        if not (re.match(r'.*%s$' % ZONE,hostname)):
            hostname=hostname + "." + ZONE
        name=re.sub('.' + ZONE,'',hostname)
        m=self.dbselectone('machines', hostname=hostname)

        print m['v6']+"  "+name+" "+m['hostname']
        print m['v4']+"    "+name+" "+m['hostname']

    def cmd_generate_javascript(self,username):
        """generate javascript participant entry"""
        p=self.dbselectone('participants', username=username)
        
        m=self.dbselect('machines', participant=p['id'])
        hostname=''
        autnum=''
        try:
            mfirst=m.next()
            hostname=mfirst['hostname']
            autnum=str(mfirst['autnum'])
        except StopIteration:
            pass
        print "['"+p['company']+"', '"+p['username']+".png', '"+p['url']+ \
              "', '"+hostname+"', '"+autnum+"'],"
    
    def cmd_generate_dns(self,hostname):
        """generate dns config"""
        if not (re.match(r'.*%s$' % ZONE,hostname)):
            hostname=hostname + "." + ZONE
        m=self.dbselectone('machines', hostname=hostname)
        for ns in PDNS:
            print "ssh "+ns+" ring-pdns add node "+ \
                  m['hostname']+" "+m['v4']+" "+m['v6']
        for ns in PDNS:
            print "ssh "+ns+" ring-pdns activate node "+ \
                  m['hostname']

def run(args):
    c = commands()
    c.run(args)

if __name__ == "__main__":
    c = commands()
    sys.exit(c.run(sys.argv[1:]))
